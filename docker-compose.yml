services:
  traefik:
    image: traefik:2.10
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --api.insecure=true
    ports:
      - "8088:80"    
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=http://localhost:4200"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    restart: unless-stopped
  mongo_stakeholders:
    image: mongo:6
    volumes: ["mongo-stakeholders:/data/db"]
    restart: unless-stopped
    ports: ["27018:27017"]

  mongo_tour:
    image: mongo:6
    volumes: ["mongo-tour:/data/db"]
    restart: unless-stopped
    ports: ["27019:27017"]

  mongo_purchase:
    image: mongo:6
    volumes: ["mongo-purchase:/data/db"]
    restart: unless-stopped
    ports: ["27020:27017"]

  mongo_blog:
    image: mongo:6
    volumes: ["mongo-blog:/data/db"]
    restart: unless-stopped
    ports: ["27021:27017"]

  nats:
    image: nats:2.10
    command: ["-js", "-m", "8222"]
    ports: ["4222:4222", "8222:8222"]
    restart: unless-stopped

  stakeholders:
    build:
      context: ./StakeholdersApi
    environment:
      - MONGO__CONNECTIONSTRING=mongodb://mongo_stakeholders:27017
      - MONGO__DATABASE=soa_stakeholders
      - JWT__SECRET=this_is_a_dev_secret_with_32+_chars!!
      - PORT=8080
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on: [mongo_stakeholders]
    ports: ["8080:8080"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.stakeholders.rule=PathPrefix(`/auth`) || PathPrefix(`/me`)"
      - "traefik.http.routers.stakeholders.entrypoints=web"
      - "traefik.http.services.stakeholders.loadbalancer.server.port=8080"
      - "traefik.http.routers.stakeholders.middlewares=cors@docker"
    restart: unless-stopped

  tour:
    build:
      context: .
      dockerfile: ./ToursApi/Dockerfile
    environment:
      - MONGO__CONNECTIONSTRING=mongodb://mongo_tour:27017
      - MONGO__DATABASE=soa_tour
      - JWT__SECRET=this_is_a_dev_secret_with_32+_chars!!
      - PORT=8090
      - ASPNETCORE_ENVIRONMENT=Development
      - NATS__HOST=nats
      - NATS__PORT=4222
      - RESERVATION_COMMAND_SUBJECT=tour.reservation.command
      - RESERVATION_REPLY_SUBJECT=tour.reservation.reply
    depends_on: [mongo_tour, nats]
    ports: ["8090:8090"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tours.rule=PathPrefix(`/tours`) || PathPrefix(`/positions`)"
      - "traefik.http.routers.tours.entrypoints=web"
      - "traefik.http.services.tours.loadbalancer.server.port=8090"
      - "traefik.http.routers.tours.middlewares=cors@docker"
    restart: unless-stopped

  purchase:
    build:
      context: .
      dockerfile: ./PurchaseApi/Dockerfile
    environment:
      - MONGO__CONNECTIONSTRING=mongodb://mongo_purchase:27017
      - MONGO__DATABASE=soa_purchase
      - JWT__SECRET=this_is_a_dev_secret_with_32+_chars!!
      - PORT=8091
      - ASPNETCORE_ENVIRONMENT=Development
      - NATS__HOST=nats
      - NATS__PORT=4222
      - CREATE_PURCHASE_COMMAND_SUBJECT=purchase.create.command
      - CREATE_PURCHASE_REPLY_SUBJECT=purchase.create.reply
      - RESERVATION_COMMAND_SUBJECT=tour.reservation.command
      - RESERVATION_REPLY_SUBJECT=tour.reservation.reply
    depends_on: [mongo_purchase, nats, tour]
    ports: ["8091:8091"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.purchase.rule=PathPrefix(`/cart`) || PathPrefix(`/purchases`)"
      - "traefik.http.routers.purchase.entrypoints=web"
      - "traefik.http.services.purchase.loadbalancer.server.port=8091"
      - "traefik.http.routers.purchase.middlewares=cors@docker"
    restart: unless-stopped

  blog:
    build:
      context: ./BlogApi
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo_blog:27017/soa_blog
      - SERVER_PORT=8092
      - SPRING_PROFILES_ACTIVE=default
      - JWT_SECRET=this_is_a_dev_secret_with_32+_chars!!
      - UPLOAD_DIR=/app/uploads
      - STAKEHOLDERS_BASE_URL=http://stakeholders:8080
      - TOURS_BASE_URL=http://tour:8090
      - PURCHASE_BASE_URL=http://purchase:8091
    depends_on: [mongo_blog]
    volumes:
      - blog-uploads:/app/uploads
    ports: ["8092:8092"]
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=soa_default"
      - "traefik.http.routers.blog.rule=PathPrefix(`/api/blogs`) || PathPrefix(`/uploads`)"
      - "traefik.http.routers.blog.entrypoints=web"
      - "traefik.http.services.blog.loadbalancer.server.port=8092"
      - "traefik.http.services.blog.loadbalancer.server.scheme=http"
      - "traefik.http.services.blog.loadbalancer.healthcheck.path=/actuator/health"
      - "traefik.http.services.blog.loadbalancer.healthcheck.interval=5s"
      - "traefik.http.services.blog.loadbalancer.healthcheck.timeout=2s"
      - "traefik.http.routers.blog.middlewares=cors@docker"
    restart: unless-stopped
    networks:
      - default
      - monitoring
    
volumes:
  mongo-stakeholders:
  mongo-tour:
  mongo-purchase:
  mongo-blog:
  blog-uploads:

networks:
  monitoring:
    external: true
    name: monitoring
